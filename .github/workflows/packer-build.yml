name: packer-build
# on:
#   workflow_run:
#     workflows: ["Integration Test"]
#     branches: [main]
#     types: 
#       - completed

on:
  pull_request:
    branches: [ main ]


env:
  PRODUCT_VERSION: "1.8.6" # or: "latest"

jobs:
  packer-build:
    runs-on: ubuntu-latest
    name: Run Packer
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Zip the flask app
        run: "zip -r packer_image/flask-app.zip flask-app/"

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
  
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
  
      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: 'Fetch the db host name and password'
        run: | 
          export DB_HOST=$(gcloud secrets versions access latest --secret=db-private-ip)
          echo "DB_HOST=${DB_HOST}" >> $GITHUB_ENV
          export DB_PASSWORD=$(gcloud secrets versions access latest --secret=db-password)
          echo "DB_PASSWORD=${DB_PASSWORD}" >> $GITHUB_ENV

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main

      - name: Run `packer init`
        id: init
        run: "packer init ./packer_image/flask_image.pkr.hcl"

      - name: Run `packer build`
        id: build
        run: |
            cd packer_image 
            IMAGE_NAME=flask-app-image-$(date +%Y%m%d%H%M%S)
            packer build -var "image_name=${IMAGE_NAME}" ./flask_image.pkr.hcl
            echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

      - name: 'Build instance template'
        id: 'build-instance-template'
        run: |
          INSTANCE_TEMPLATE_NAME=template-${{ env.IMAGE_NAME }}
          gcloud compute instance-templates create ${INSTANCE_TEMPLATE_NAME} \
          --project=${{ vars.PROJECT_INSTANCE }} \
          --region=${{ vars.REGION_INSTANCE }} \
          --machine-type=${{ vars.MACHINE_TYPE }} \
          --boot-disk-size=${{ vars.boot_disk_size }} \
          --boot-disk-type=${{ vars.boot_disk_type }} \
          --image=${{ vars.IMAGE_NAME }} \
          --network=${{ vars.NETWORK_INSTANCE }} \
          --subnet=${{ vars.SUBNET_INSTANCE }} \
          --tags=${{ vars.TAGS_INSTANCE }} \
          --scopes=${{ vars.SCOPES_INSTANCE }} \
          --service-account=${{ vars.SERVICE_ACCOUNT }} \
          --metadata=startup-script="#!/bin/bash 
            touch ${{ vars.ENV_FILE_PATH_INSTANCE }} 
            echo "DB_HOST=${{ env.DB_HOST }}" >> ${{ vars.ENV_FILE_PATH_INSTANCE }} 
            echo "DB_PORT=${{ vars.DB_PORT_INSTANCE}}" >> ${{ vars.ENV_FILE_PATH_INSTANCE }} 
            echo "DB_NAME=${{ vars.DB_NAME_INSTANCE }}" >> ${{ vars.ENV_FILE_PATH_INSTANCE }} 
            echo "DB_USER=${{ vars.DB_USER_INSTANCE }}" >> ${{ vars.ENV_FILE_PATH_INSTANCE }} 
            echo "DB_PASSWORD=${{ env.DB_PASSWORD }}" >> ${{ vars.ENV_FILE_PATH_INSTANCE }} 
            echo "LOG_FILE_PATH=${{ vars.LOG_FILE_PATH }}" >> ${{ vars.ENV_FILE_PATH_INSTANCE }} 
            echo "PROJECT_ID=${{ vars.PROJECT_INSTANCE }}" >> ${{ vars.ENV_FILE_PATH_INSTANCE }} 
            echo "PUBSUB_TOPIC_ID=${{ vars.PUB_SUB_TOPIC_NAME }}" >> ${{ vars.ENV_FILE_PATH_INSTANCE }} 
            echo "ENVIRONMENT=${{ vars.APP_ENV }}" >> ${{ vars.ENV_FILE_PATH_INSTANCE }} 
            sudo chown csye6225:csye6225 ${{ vars.ENV_FILE_PATH_INSTANCE }} 
            sudo chmod 644 ${{ vars.ENV_FILE_PATH_INSTANCE }} 
            sudo systemctl daemon-reload 
            sudo systemctl restart flaskapp" 
          echo "INSTANCE_TEMPLATE_NAME=${INSTANCE_TEMPLATE_NAME}" >> $GITHUB_ENV

      - name: 'Update instance group'
        id: 'build-managed-instance-group'
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ vars.INSTANCE_GROUP_NAME }} \
          --version=template=${{ env.INSTANCE_TEMPLATE_NAME }} \
          --region=${{ vars.REGION_INSTANCE }} \

      - name: 'Wait for changes to be rolled out'
        id: 'wait-for-rolling-update'
        run: |
          gcloud compute instance-groups managed wait-until ${{ vars.INSTANCE_GROUP_NAME }} \
          --version-target-reached \
          --region=${{ vars.REGION_INSTANCE }}
           



